{"version":3,"sources":["redux/actions.js","redux/constants.js","components/Pagination/Pagination.js","components/Wrapper/Wrapper.js","containers/List/List.js","containers/Update/Update.js","router/index.js","App.js","redux/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["baseUsersUrl","baseUserUrl","getUsers","dispatch","a","axios","get","res","type","payload","data","console","log","deleteUser","id","delete","createUser","post","editUser","put","then","catch","e","Pagination","users","currentPage","setCurrentPage","times","Math","ceil","length","pages","Array","from","keys","map","item","items","key","uid","className","onClick","event","page","preventDefault","setPage","href","size","Wrapper","title","children","connect","state","actions","history","useHistory","useState","currentUsers","setCurrentUsers","useEffect","to","newUsers","filter","index","currentUsersHandler","body","name","surname","desc","push","headers","Object","pagination","match","setFormData","isUpdate","setIsUpdate","path","includes","params","user","find","formData","target","value","onSubmit","onChange","required","htmlFor","url","component","List","Update","App","newRoutes","routes","exact","initialState","store","createStore","action","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a6211ef1.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { GET_USERS } from \"./constants\";\r\nconst baseUsersUrl = \"https://cors-anywhere.herokuapp.com/77.120.241.80:8911/api/users\";\r\nconst baseUserUrl = \"https://cors-anywhere.herokuapp.com/77.120.241.80:8911/api/user/\";\r\n\r\nconst getList = (data) => {\r\n  return {\r\n    type: GET_USERS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getUsers = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await axios.get(baseUsersUrl);\r\n      dispatch(getList(res.data));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteUser = (id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      await axios.delete(baseUserUrl + id);\r\n      dispatch(getUsers());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createUser = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      await axios.post(baseUsersUrl, data);\r\n      dispatch(getUsers());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editUser = (id, data) => {\r\n  return function (dispatch) {\r\n    axios\r\n      .put(baseUserUrl + id, data)\r\n      .then((res) => {\r\n        dispatch(getUsers());\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n};\r\n","const GET_USERS = \"GET_USERS\";\r\n\r\nexport { GET_USERS };\r\n","import \"./index.scss\";\r\n\r\nimport React from \"react\";\r\nimport { RiArrowLeftSLine, RiArrowRightSLine } from \"react-icons/ri\";\r\n\r\nimport uid from \"uid\";\r\n\r\nconst Pagination = ({ users, currentPage, setCurrentPage }) => {\r\n  const times = Math.ceil(users.length / 5);\r\n  const pages = Array.from(Array(times).keys()).map((item) => item + 1);\r\n\r\n  const setPage = (event, page) => {\r\n    event.preventDefault();\r\n    setCurrentPage(page);\r\n  };\r\n  const items = pages.map((item) => (\r\n    <li\r\n      key={uid()}\r\n      className={currentPage === item ? \"active pagination__arrow--disable\" : \"waves-effect\"}\r\n      onClick={(event) => setPage(event, item)}\r\n    >\r\n      <a href=\"/\">{item}</a>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      <li\r\n        className={currentPage === 1 ? \"disabled pagination__arrow--disable\" : \"waves-effect\"}\r\n        onClick={() => setCurrentPage(currentPage - 1)}\r\n      >\r\n        <RiArrowLeftSLine size={30} />\r\n      </li>\r\n      {items}\r\n      <li className={currentPage === times ? \"disabled pagination__arrow--disable\" : \"waves-effect\"}>\r\n        <RiArrowRightSLine\r\n          size={30}\r\n          onClick={() => setCurrentPage(currentPage + 1)}\r\n        />\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import \"./index.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nconst Wrapper = ({ title, children }) => (\r\n  <>\r\n    <h1 className={`wrapper-title`}>{title}</h1>\r\n    {children}\r\n  </>\r\n);\r\n\r\nexport default Wrapper;\r\n","import \"./index.scss\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport uid from \"uid\";\r\nimport Pagination from \"../../components/Pagination\";\r\nimport Wrapper from \"../../components/Wrapper\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\n\r\nconst List = ({ getUsers, deleteUser, users }) => {\r\n  \r\n  let history = useHistory();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [currentUsers, setCurrentUsers] = useState(users);\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, [getUsers]);\r\n\r\n  const currentUsersHandler = () => {\r\n    const from = currentPage === 1 ? 1 : (currentPage - 1) * 5 + 1;\r\n    const to = currentPage * 5;\r\n    const newUsers = users.filter(\r\n      (item, index) => index + 1 >= from && index + 1 <= to\r\n    );\r\n\r\n    setCurrentUsers(newUsers);\r\n  };\r\n\r\n  useEffect(() => {\r\n    currentUsersHandler();\r\n  }, [currentPage, users]);\r\n\r\n  const handleEditUser = (id) => {\r\n    history.push(`/r-list/update/${id}`);\r\n  };\r\n\r\n  const handleNewUser = () => {\r\n    history.push(`/r-list/new`);\r\n  };\r\n\r\n  const body =\r\n    currentUsers.length > 0\r\n      ? currentUsers.map((item) => (\r\n          <tr key={item.id}>\r\n            <td>{item.name}</td>\r\n            <td>{item.surname}</td>\r\n            <td>{item.desc}</td>\r\n            <td>\r\n              <button\r\n                className=\"btn waves-effect blue lighten-2\"\r\n                type=\"button\"\r\n                name=\"action\"\r\n                onClick={() => handleEditUser(item.id)}\r\n              >\r\n                <FiEdit />\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"btn waves-effect red\"\r\n                type=\"button\"\r\n                name=\"action\"\r\n                onClick={() => deleteUser(item.id)}\r\n              >\r\n                <RiDeleteBin5Line />\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      : null;\r\n\r\n  const headers =\r\n    users.length > 0\r\n      ? Object.keys(users[0]).map((item) => {\r\n          if (item !== \"id\") {\r\n            return <th key={uid()}>{item}</th>;\r\n          }\r\n        })\r\n      : null;\r\n\r\n  const pagination =\r\n    users.length > 0 ? (\r\n      <Pagination\r\n        users={users}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n    ) : null;\r\n\r\n  return (\r\n    <Wrapper title=\"List\">\r\n      <table className={`responsive-table`}>\r\n        <thead>\r\n          <tr>\r\n            {headers}\r\n            <th>\r\n              <button className=\"btn waves-effect blue lighten-2\" type=\"button\">\r\n                <FiEdit />\r\n              </button>\r\n            </th>\r\n            <th>\r\n              <button className=\"btn waves-effect red\" type=\"button\">\r\n                <RiDeleteBin5Line />\r\n              </button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{body}</tbody>\r\n      </table>\r\n      {pagination}\r\n\r\n      <button\r\n        className=\"btn waves-effect waves-light list__button--new\"\r\n        type=\"button\"\r\n        name=\"action\"\r\n        onClick={handleNewUser}\r\n      >\r\n        New\r\n      </button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default connect((state) => state, actions)(List);\r\n","import \"./index.scss\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Wrapper from \"../../components/Wrapper\";\r\n\r\nconst Update = ({ createUser, editUser, users, match }) => {\r\n  let history = useHistory();\r\n\r\n  const [data, setFormData] = useState({\r\n    name: \"\",\r\n    surname: \"\",\r\n    desc: \"\",\r\n  });\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (users.length === 0) {\r\n      history.push(\"/r-list/\");\r\n    }\r\n\r\n    const path = match.path;\r\n    if (path.includes(\"update\") && match.params.id) {\r\n      const user = users.find((item) => item.id === +match.params.id);\r\n\r\n      setFormData(user);\r\n      setIsUpdate(true);\r\n    }\r\n  }, [users]);\r\n\r\n  const formData = (event) =>\r\n    setFormData({\r\n      ...data,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n\r\n  const backToList = () => {\r\n    history.push(\"/r-list/\");\r\n  };\r\n\r\n  const updateUser = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isUpdate) {\r\n      const id = match.params.id;\r\n      editUser(id, data);\r\n    } else {\r\n      createUser(data);\r\n    }\r\n\r\n    setFormData({\r\n      name: \"\",\r\n      surname: \"\",\r\n      desc: \"\",\r\n    });\r\n\r\n    history.push(\"/r-list/\");\r\n  };\r\n\r\n  return (\r\n    <Wrapper title={isUpdate ? \"Update the user\" : \"Add a new user\"}>\r\n      <form className=\"col s12\" onSubmit={updateUser}>\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              value={data.name}\r\n              onChange={(e) => formData(e)}\r\n              id=\"name\"\r\n              type=\"text\"\r\n              className=\"validate\"\r\n              name=\"name\"\r\n              required\r\n            />\r\n            <label className=\"active\" htmlFor=\"name\">\r\n              Name\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              value={data.surname}\r\n              onChange={(e) => formData(e)}\r\n              id=\"surname\"\r\n              type=\"text\"\r\n              className=\"validate\"\r\n              name=\"surname\"\r\n              required\r\n            />\r\n            <label className=\"active\" htmlFor=\"surname\">\r\n              Surname\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              value={data.desc}\r\n              onChange={(e) => formData(e)}\r\n              id=\"description\"\r\n              type=\"text\"\r\n              className=\"validate\"\r\n              name=\"desc\"\r\n              required\r\n            />\r\n            <label className=\"active\" htmlFor=\"description\">\r\n              Description\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <button\r\n          className=\"btn waves-effect waves-light\"\r\n          type=\"submit\"\r\n          name=\"action\"\r\n        >\r\n          {isUpdate ? \"Update the user\" : \"Add new user\"}\r\n        </button>\r\n        <button\r\n          className=\"btn waves-effect blue lighten-2 update__button--back\"\r\n          type=\"button\"\r\n          name=\"action\"\r\n          onClick={() => backToList()}\r\n        >\r\n          Back\r\n        </button>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default connect((state) => state, actions)(Update);\r\n","import List from \"../containers/List\";\r\nimport Update from \"../containers/Update\";\r\n\r\nexport default [\r\n  {\r\n    url: \"/r-list/\",\r\n    component: List,\r\n  },\r\n  {\r\n    url: \"/r-list/new\",\r\n    component: Update,\r\n  },\r\n  {\r\n    url: \"/r-list/update/:id\",\r\n    component: Update,\r\n  },\r\n];\r\n","import \"./index.scss\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport routes from \"./router\";\nimport uid from \"uid\";\n\nfunction App() {\n  const newRoutes = routes.map((item) => (\n    <Route key={uid()} exact path={item.url} component={item.component} />\n  ));\n\n  return (\n    <Router>\n      <main className={`app`}>\n        <Switch>{newRoutes}</Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","import {\r\n  GET_USERS,\r\n} from \"./constants\";\r\n\r\nconst initialState = {\r\n  users: [],\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducers from './reducer';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'material-icons/css/material-icons.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}